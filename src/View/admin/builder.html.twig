{% extends 'layout/base.html.twig' %}
{% block title %}Admin ‚Äì Builder
{% endblock %}

{% block content %}
	<h1>Administration ‚Äì Builder</h1>

	{% if errors is defined and errors %}
		<div class="alert error">
			<strong>Impossible d‚Äôenregistrer :</strong>
			<ul>
				{% for e in errors %}
					<li>{{ e }}</li>
				{% endfor %}
			</ul>
		</div>
	{% endif %}
	{% if flash %}
		<div class="flash-success">
			{{ flash }}
		</div>
	{% endif %}
	<form method="post" action="/admin" id="builderForm" class="flow">
		<input type="hidden" name="csrf" value="{{ csrf }}"/>

		<div class="builder-toolbar">
			<button type="button" class="btn" onclick="addSection()">+ Ajouter une section</button>
			<button type="submit" class="btn btn-primary">üíæ Sauvegarder</button>
			<button type="button" class="btn btn-cancel">
				<a href="/admin" target="_self">‚ùå Annuler</a>
			</button>

		</div>

		<div id="sectionsWrap" class="sections-wrap">
			{% for s in tree %}
				<details class="admin-section">
					<summary>
						<span class="section-title">Section</span>
						<input class="inline-input" name="sections[{{ s.id }}][nom]" value="{{ s.nom }}" placeholder="Nom" required>
						<input
						class="inline-input slug" name="sections[{{ s.id }}][slug]" value="{{ s.slug }}" placeholder="slug" required>
						{# üëá Ordre d'affichage (section) #}
						<label class="stack mini">
							<span>Ordre</span>
							<input class="inline-input sm order-input" type="number" name="sections[{{ s.id }}][ordre_affichage]" value="{{ s.ordre_affichage }}" min="1" required>
						</label>
						<label class="check"><input type="checkbox" name="sections[{{ s.id }}][actif]" {{ s.actif ? 'checked' : '' }}>
							Actif</label>
						<label class="danger"><input type="checkbox" name="sections[{{ s.id }}][delete]">
							Supprimer</label>
					</summary>

					<div class="section-body">
						<label class="stack">
							<span>Description</span>
							<textarea name="sections[{{ s.id }}][description]" rows="2">{{ s.description }}</textarea>
						</label>

						<label class="stack">
							<span>M√©ta description</span>
							<input name="sections[{{ s.id }}][meta_description]" value="{{ s.meta_description }}">
						</label>

						<div class="section-actions">
							<button type="button" class="btn btn-soft" onclick="addPrestation('{{ s.id }}')">+ Ajouter une prestation</button>
						</div>

						<div class="prestations" id="prestations-{{ s.id }}">
							{% for p in s.prestations %}
								<details class="admin-prestation">
									<summary>
										<span class="presta-title">Prestation</span>
										<input type="hidden" name="prestations[{{ p.id }}][section_id]" value="{{ s.id }}">
										<input class="inline-input" name="prestations[{{ p.id }}][nom]" value="{{ p.nom }}" placeholder="Nom" required>
										<label class="stack mini">
											<span>Ordre</span>
											<input class="inline-input sm order-input" type="number" name="prestations[{{ p.id }}][ordre_affichage]" value="{{ p.ordre_affichage }}" min="1" required>
										</label>
										<label class="check"><input type="checkbox" name="prestations[{{ p.id }}][actif]" {{ p.actif ? 'checked' : '' }}>
											Actif</label>
										<label class="danger"><input type="checkbox" name="prestations[{{ p.id }}][delete]">
											Supprimer</label>
									</summary>

									<div class="presta-body">
										<label class="stack">
											<span>Description</span>
											<textarea name="prestations[{{ p.id }}][description]" rows="2">{{ p.description }}</textarea>
										</label>

										<div class="presta-actions">
											<button type="button" class="btn btn-soft" onclick="addTarif('{{ p.id }}')">+ Ajouter un tarif</button>
										</div>

										<div class="tarifs" id="tarifs-{{ p.id }}">
											{% for t in p.tarifs %}
												<div class="admin-tarif">
													<input type="hidden" name="tarifs[{{ t.id }}][prestation_id]" value="{{ p.id }}">
													<input class="inline-input sm" name="tarifs[{{ t.id }}][duree]" value="{{ t.duree }}" placeholder="Dur√©e">
													<input class="inline-input sm" name="tarifs[{{ t.id }}][nb_seances]" value="{{ t.nb_seances }}" placeholder="Nb s√©ances">
													<input class="inline-input sm" type="number" step="0.01" name="tarifs[{{ t.id }}][prix]" value="{{ t.prix }}" placeholder="Prix">
													<label class="stack mini">
														<span>Ordre</span>
														<input class="inline-input sm order-input" type="number" name="tarifs[{{ t.id }}][ordre_affichage]" value="{{ t.ordre_affichage }}" min="1" required>
													</label>
													<label class="danger"><input type="checkbox" name="tarifs[{{ t.id }}][delete]">
														Supprimer</label>
												</div>
											{% endfor %}
										</div>
									</div>
								</details>
							{% endfor %}
						</div>
					</div>
				</details>
			{% else %}
				<p>Aucune section.</p>
			{% endfor %}
		</div>
	</form>

	<style>

		#builderForm {
			min-height: 70vh;
			padding: 3rem 1rem;
		}
		.flow > * + * {
			margin-top: 1rem;
		}
		.builder-toolbar {
			display: flex;
			gap: 0.5rem;
			align-items: center;
			margin: 0.5rem 0 1rem;
		}
		.btn {
			padding: 0.6rem 0.9rem;
			border-radius: 10px;
			border: 1px solid #ddd;
			background: #f6f6f6;
			cursor: pointer;
		}
		.btn:hover {
			background: #eee;
		}
		.btn-primary {
			background: #2e7d32;
			color: #fff;
			border-color: #2e7d32;
		}
		.btn-primary:hover {
			filter:brightness(0.95);
		}
		.btn-soft {
			background: #faf5ef;
			border-color: #ead9c5;
		}

		.inline-input {
			padding: 0.5rem 0.6rem;
			border: 1px solid #ddd;
			border-radius: 8px;
			min-width: 180px;
		}
		.inline-input.sm {
			min-width: 120px;
		}
		.stack {
			display: flex;
			flex-direction: column;
			gap: 0.35rem;
		}
		.stack.mini {
			min-width: 110px;
		}

		.sections-wrap {
			display: flex;
			flex-direction: column;
			gap: 1rem;
		}
		.admin-section {
			background: #fff9f1;
			border: 1px solid #efdcc6;
			border-radius: 12px;
			padding: 0.25rem 1rem;
		}
		.admin-prestation {
			background: #f7fbff;
			border: 1px solid #cfe3f6;
			border-radius: 12px;
			padding: 0.25rem 1rem;
			margin-top: 0.75rem;
		}
		.admin-tarif {
			background: #f9f9f9;
			border: 1px dashed #ddd;
			border-radius: 10px;
			padding: 0.5rem;
			display: flex;
			gap: 0.5rem;
			align-items: center;
			margin-top: 0.5rem;
		}

		details > summary {
			list-style: none;
			cursor: pointer;
			display: flex;
			gap: 0.6rem;
			align-items: center;
			flex-wrap: wrap;
			padding: 0.6rem 0;
		}
		details > summary::-webkit-details-marker {
			display: none;
		}
		.section-title,
		.presta-title {
			font-weight: 600;
			padding: 0.25rem 0.55rem;
			border-radius: 8px;
		}
		.section-title {
			background: #f1e2c9;
		}
		.presta-title {
			background: #dcecff;
		}

		.section-body,
		.presta-body {
			padding: 0.5rem 0 1rem;
			border-top: 1px dashed #e4cfb7;
		}
		.presta-body {
			border-top-color: #cfe3f6;
		}
		.section-actions,
		.presta-actions {
			margin-top: 0.5rem;
		}

		.check {
			display: flex;
			align-items: center;
			gap: 0.35rem;
		}
		.danger {
			color: #800;
			display: flex;
			align-items: center;
			gap: 0.35rem;
		}
		.slug {
			font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace;
		}

		.alert.error {
			background: #fee;
			border: 1px solid #f6c;
			color: #600;
			padding: 1rem;
			border-radius: 10px;
		}
		.field-error {
			outline: 2px solid #d32f2f;
			background: #fff5f5;
		}

		.btn-cancel {
			background: #ffecec;
			border-color: #f5c2c2;
		}
		.btn-cancel:hover {
			background: #ffdede;
		}

		.flash-success {
			background: #e8f9e9;
			border: 1px solid #a5d6a7;
			color: #2e7d32;
			padding: 0.75rem 1rem;
			margin-bottom: 1rem;
			border-radius: 6px;
			font-weight: 500;
		}
	</style>

	<script>
		let newSec = 0,
newPresta = 0,
newTarif = 0;

// Helpers
// $ / $$ pour querySelector / querySelectorAll
const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));

function slugify(str) {
return(str || '').normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '').slice(0, 100);
}

function openParentsDetails(el) {
for (let p = el ?. parentElement; p; p = p.parentElement) {
if (p.tagName ?. toLowerCase() === 'details') 
p.open = true;

}
}

function nextOrder(inputs) {
let max = -1;
inputs.forEach(inp => {
const block = inp.closest('.admin-section,.admin-prestation,.admin-tarif');
const del = block ?. querySelector('input[type="checkbox"][name*="[delete]"]') ?. checked;
if (del) 
return;

const v = inp.value.trim();
if (v !== '' && !isNaN(v)) 
max = Math.max(max, Number(v));

});
return max + 1;
}

// D√©sactiver tout un bloc si [delete] coch√© (√©vite validations & focus)
function setDisabledWithin(container, disabled) {
$$('input,select,textarea,button', container).forEach(el => {
if (el.type === 'checkbox' && /\[delete\]/.test(el.name)) 
return;

el.disabled = !! disabled;
});
container.style.opacity = disabled ? .5 : '';
container.style.filter = disabled ? 'grayscale(.4)' : '';
}

// toggle delete disables block 
document.addEventListener('change', (e) => {
const chk = e.target;
if (!(chk instanceof HTMLInputElement)) 
return;

if (chk.type !== 'checkbox' || !/\[delete\]/.test(chk.name)) 
return;

const block = chk.closest('.admin-tarif, details.admin-prestation, details.admin-section, .card.prestation, .card.tarif');
if (block) 
setDisabledWithin(block, chk.checked);

});

// Auto-slug section
document.addEventListener('input', (e) => {
const el = e.target;
if (!(el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement)) 
return;

const m = el.name && el.name.match(/^sections\[(.+?)\]\[nom\]$/);
if (! m) 
return;

const secId = m[1];
const slugInput = document.querySelector (`input[name="sections[${secId}][slug]"]`);
if (slugInput) {
slugInput.value = slugify(el.value);
}
});


// remplissage auto ordre si vide au blur (max+1 dans le scope)
// on sort si √¢s un champ texte/num, ou si ce n'est pas un champ qui g√®re les ordres d'affichage
document.addEventListener('blur', (e) => {
const inp = e.target;
if (!(inp instanceof HTMLInputElement) || ! inp.classList.contains('order-input')) 
return;

if (inp.value.trim() !== '') 
return;


let scope = [];
const section = inp.closest('.admin-section');
const presta = inp.closest('.admin-prestation');

if (inp.name.startsWith('sections[')) {
scope = $$('.admin-section > summary .order-input[name^="sections["]', section ?. parentElement || document);
} else if (inp.name.startsWith('prestations[')) {
scope = $$('.admin-prestation > summary .order-input[name^="prestations["]', section || document);
} else if (inp.name.startsWith('tarifs[')) {
scope = $$('.admin-tarif .order-input[name^="tarifs["]', presta || document);
}
inp.value = nextOrder(scope);
}, true);

function addSection() {
const id = 'new' + (
++ newSec
);
const wrap = $('#sectionsWrap');
const tpl = `
  <details class="admin-section" open data-id="${id}">
    <summary>
      <span class="section-title">Section</span>
      <input class="inline-input" name="sections[${id}][nom]" placeholder="Nom" required>
      <input class="inline-input slug" name="sections[${id}][slug]" placeholder="slug" required>
      <label class="stack mini"><span>Ordre</span><input class="inline-input sm order-input" type="number" name="sections[${id}][ordre_affichage]" min="1" ></label>
      <label class="check"><input type="checkbox" name="sections[${id}][actif]" checked> Actif</label>
      <label class="danger"><input type="checkbox" name="sections[${id}][delete]"> Supprimer</label>
      <button type="button" class="btn btn-cancel" onclick="cancelBlock(this)">‚ùå Annuler</button>
    </summary>
    <div class="section-body">
      <label class="stack"><span>Description</span><textarea name="sections[${id}][description]" rows="2"></textarea></label>
      <label class="stack"><span>M√©ta description</span><input name="sections[${id}][meta_description]"></label>
      <div class="section-actions">
        <button type="button" class="btn btn-soft" onclick="addPrestation('${id}')">+ Ajouter une prestation</button>
        <button type="button" class="btn btn-cancel" onclick="cancelBlock(this)">‚ùå Annuler</button>
      </div>
      <div class="prestations" id="prestations-${id}"></div>
    </div>
  </details>`;
wrap.insertAdjacentHTML('beforeend', tpl);
}

function addPrestation(sectionId) {
const id = 'newP' + (
++ newPresta
);
const wrap = document.getElementById('prestations-' + sectionId);
const tpl = `
  <details class="admin-prestation" open data-id="${id}">
    <summary>
      <span class="presta-title">Prestation</span>
      <input type="hidden" name="prestations[${id}][section_id]" value="${sectionId}">
      <input class="inline-input" name="prestations[${id}][nom]" placeholder="Nom" required>
      <label class="stack mini"><span>Ordre</span><input class="inline-input sm order-input" type="number" name="prestations[${id}][ordre_affichage]" value="0" min="0" required></label>
      <label class="check"><input type="checkbox" name="prestations[${id}][actif]" checked> Actif</label>
      <label class="danger"><input type="checkbox" name="prestations[${id}][delete]"> Supprimer</label>
      <button type="button" class="btn btn-cancel" onclick="cancelBlock(this)">‚ùå Annuler</button>
    </summary>
    <div class="presta-body">
      <label class="stack"><span>Description</span><textarea name="prestations[${id}][description]" rows="2"></textarea></label>
      <div class="presta-actions">
        <button type="button" class="btn btn-soft" onclick="addTarif('${id}')">+ Ajouter un tarif</button>
      </div>
      <div class="tarifs" id="tarifs-${id}"></div>
    </div>
  </details>`;
wrap.insertAdjacentHTML('beforeend', tpl);
}

function addTarif(prestationId) {
const id = 'newT' + (
++ newTarif
);
const wrap = document.getElementById('tarifs-' + prestationId);
const tpl = `
  <div class="admin-tarif" data-id="${id}">
    <input type="hidden" name="tarifs[${id}][prestation_id]" value="${prestationId}">
    <input class="inline-input sm" name="tarifs[${id}][duree]" placeholder="Dur√©e">
    <input class="inline-input sm" name="tarifs[${id}][nb_seances]" placeholder="Nb s√©ances">
    <input class="inline-input sm" type="number" step="0.01" name="tarifs[${id}][prix]" value="0" placeholder="Prix">
    <label class="stack mini"><span>Ordre</span><input class="inline-input sm order-input" type="number" name="tarifs[${id}][ordre_affichage]" value="0" min="0" required></label>
    <label class="danger"><input type="checkbox" name="tarifs[${id}][delete]"> Supprimer</label>
    <button type="button" class="btn btn-cancel" onclick="cancelBlock(this)">‚ùå Annuler</button>
  </div>`;
wrap.insertAdjacentHTML('beforeend', tpl);
}

// Annuler: supprime si "new*", sinon coche delete + grise + replie 
function cancelBlock(btn) {
const card = btn.closest('.admin-tarif, details.admin-prestation, details.admin-section, .card.prestation, .card.tarif');
if (! card) 
return;

const isNew = (card.dataset.id || '').startsWith('new');
if (isNew) {
card.remove();
return;
}
const del = card.querySelector('input[type="checkbox"][name*="[delete]"]');
if (del) {
del.checked = true;
setDisabledWithin(card, true);
if (card.tagName ?. toLowerCase() === 'details') 
card.open = false;

}
}

// Validation et submit
const form = document.getElementById('builderForm');

form.addEventListener('submit', (e) => {

let sInputs = $$('.admin-section > summary .order-input[name^="sections["]');
const autoS = nextOrder(sInputs);
sInputs.forEach(inp => {
if (inp.value.trim() === '') 
inp.value = autoS;

});

// Prestations (par section)
$$('.admin-section').forEach(sec => {
const pInputs = $$('.admin-prestation > summary .order-input[name^="prestations["]', sec);
const autoP = nextOrder(pInputs);
pInputs.forEach(inp => {
if (inp.value.trim() === '') 
inp.value = autoP;

});
});

// Tarifs (par prestation)
$$('.admin-prestation').forEach(pre => {
const tInputs = $$('.admin-tarif .order-input[name^="tarifs["]', pre);
const autoT = nextOrder(tInputs);
tInputs.forEach(inp => {
if (inp.value.trim() === '') 
inp.value = autoT;

});
});

// Validation native HTML5 + ouverture du 1er accord√©on invalide
if (! form.checkValidity()) {
e.preventDefault();
const invalid = form.querySelector(':invalid');
if (invalid) {
openParentsDetails(invalid);
requestAnimationFrame(() => {
invalid.reportValidity();
invalid.focus({preventScroll: true});
});
}
}
});
	</script>

{% endblock %}
